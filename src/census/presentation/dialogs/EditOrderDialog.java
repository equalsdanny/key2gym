/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package census.presentation.dialogs;

import census.business.*;
import census.business.api.BusinessException;
import census.business.api.SecurityException;
import census.business.api.ValidationException;
import census.business.dto.*;
import census.presentation.CensusFrame;
import census.presentation.util.DiscountListCellRenderer;
import census.presentation.util.ItemListCellRenderer;
import census.presentation.util.MutableListModel;
import census.presentation.util.OrderLinesTableModel;
import java.awt.Color;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.math.BigDecimal;
import java.text.MessageFormat;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.table.TableColumn;

/**
 * This dialog allows user to view and edit a order. It implements the following
 * features:
 *
 * <ul>
 *
 * <il> Basic information </il> <il> Payment information <il> Purchases
 *
 * </ul>
 *
 * Session variables: <ul>
 *
 * <li> orderId - the ID of order to be shown and edited </li> <li>
 * fullPaymentForced - if true, the dialog won't exit with RESULT_OK, if the
 * user did not record full payment.
 *
 * </ul>
 *
 * A transaction is required to be active, and a session to be open, upon the
 * dialog's creation.
 *
 * This dialog supports hot swapping. The session variables can be set and reset
 * after the
 * <code>setVisible(true)</code> was called.
 *
 * @author Danylo Vashchilenko
 */
public class EditOrderDialog extends CensusDialog {

    /**
     * Constructs from a parent frame.
     *
     * @param parent the frame to use when positioning itself
     */
    public EditOrderDialog(JFrame parent) {
        super(parent, true);
        ordersService = OrdersService.getInstance();
        clientsService = ClientsService.getInstance();
        attendancesService = AttendancesService.getInstance();
        itemsService = ItemsService.getInstance();
        fullPaymentForced = false;

        initComponents();

        itemsList.addFocusListener(new FocusAdapter() {

            @Override
            public void focusGained(FocusEvent e) {
                orderLinesTable.clearSelection();
            }
        });

        orderLinesTable.addFocusListener(new FocusAdapter() {

            @Override
            public void focusGained(FocusEvent e) {
                itemsList.clearSelection();
            }
        });

        setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        order = new census.business.dto.OrderDTO();
        addItemButton = new javax.swing.JButton();
        removeItemButton = new javax.swing.JButton();
        basicInformationPanel = new javax.swing.JPanel();
        subjectLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        subjectTextField = new javax.swing.JTextField();
        dateTextField = new javax.swing.JTextField();
        paymentPanel = new javax.swing.JPanel();
        totalLabel = new javax.swing.JLabel();
        totalTextField = new javax.swing.JTextField();
        paidLabel = new javax.swing.JLabel();
        paidTextField = new javax.swing.JTextField();
        paymentLabel = new javax.swing.JLabel();
        paymentTextField = new javax.swing.JTextField();
        dueLabel = new javax.swing.JLabel();
        dueTextField = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        purchasingSplitPane = new javax.swing.JSplitPane();
        purchasesScrollPane = new javax.swing.JScrollPane();
        orderLinesTable = new javax.swing.JTable();
        itemsScrollPane = new javax.swing.JScrollPane();
        itemsList = new javax.swing.JList();
        discountsComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(bundle.getString("Title.Order")); // NOI18N
        setResizable(false);

        addItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/census/presentation/resources/plus16.png"))); // NOI18N
        addItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemButtonActionPerformed(evt);
            }
        });

        removeItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/census/presentation/resources/remove16.png"))); // NOI18N
        removeItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemButtonActionPerformed(evt);
            }
        });

        basicInformationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("Text.BasicInformation"))); // NOI18N

        subjectLabel.setText(bundle.getString("Label.Subject")); // NOI18N

        dateLabel.setText(bundle.getString("Label.Date")); // NOI18N

        subjectTextField.setEditable(false);

        dateTextField.setEditable(false);

        javax.swing.GroupLayout basicInformationPanelLayout = new javax.swing.GroupLayout(basicInformationPanel);
        basicInformationPanel.setLayout(basicInformationPanelLayout);
        basicInformationPanelLayout.setHorizontalGroup(
            basicInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basicInformationPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(basicInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(subjectLabel)
                    .addComponent(dateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(basicInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateTextField)
                    .addComponent(subjectTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        basicInformationPanelLayout.setVerticalGroup(
            basicInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basicInformationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(basicInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subjectLabel)
                    .addComponent(subjectTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(basicInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel)
                    .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        paymentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("Text.Payment"))); // NOI18N

        totalLabel.setText(bundle.getString("Label.Total")); // NOI18N

        totalTextField.setEditable(false);
        totalTextField.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        totalTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        paidLabel.setText(bundle.getString("Label.Paid")); // NOI18N

        paidTextField.setEditable(false);
        paidTextField.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        paidTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        paymentLabel.setText(bundle.getString("Label.Payment")); // NOI18N

        paymentTextField.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        paymentTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        paymentTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                paymentTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                paymentTextFieldFocusLost(evt);
            }
        });

        dueLabel.setText(bundle.getString("Label.Due")); // NOI18N

        dueTextField.setEditable(false);
        dueTextField.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        dueTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        javax.swing.GroupLayout paymentPanelLayout = new javax.swing.GroupLayout(paymentPanel);
        paymentPanel.setLayout(paymentPanelLayout);
        paymentPanelLayout.setHorizontalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paymentLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dueLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(paidLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(totalLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dueTextField)
                    .addComponent(paymentTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(paidTextField)
                    .addComponent(totalTextField))
                .addContainerGap())
        );
        paymentPanelLayout.setVerticalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalLabel)
                    .addComponent(totalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paidLabel)
                    .addComponent(paidTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paymentLabel)
                    .addComponent(paymentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);
        okButton.setText(bundle.getString("Button.Ok")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(bundle.getString("Button.Cancel")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        purchasingSplitPane.setDividerLocation(100);
        purchasingSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        OrderLinesTableModel.Column[] orderLinesTableColumns = new OrderLinesTableModel.Column[] {
            OrderLinesTableModel.Column.ITEM_TITLE,
            OrderLinesTableModel.Column.ITEM_PRICE,
            OrderLinesTableModel.Column.QUANTITY,
            OrderLinesTableModel.Column.DISCOUNT_TITLE,
            OrderLinesTableModel.Column.TOTAL
        };

        orderLinesTableModel = new OrderLinesTableModel(orderLinesTableColumns);
        orderLinesTable.setModel(orderLinesTableModel);
        int[] widths = new int[]{220, 55, 53, 68, 54};
        TableColumn column = null;
        for (int i = 0; i < widths.length; i++) {
            column = orderLinesTable.getColumnModel().getColumn(i);
            column.setPreferredWidth(widths[i]);
        }
        purchasesScrollPane.setViewportView(orderLinesTable);

        purchasingSplitPane.setLeftComponent(purchasesScrollPane);

        itemsListModel = new MutableListModel<>();
        itemsList.setModel(itemsListModel);
        itemsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        itemsList.setCellRenderer(new ItemListCellRenderer());
        itemsScrollPane.setViewportView(itemsList);

        purchasingSplitPane.setBottomComponent(itemsScrollPane);

        List<DiscountDTO> discounts = DiscountsService.getInstance().findAll();
        discounts.add(0, null);
        discountsComboBox.setModel(new DefaultComboBoxModel(discounts.toArray()));
        discountsComboBox.setRenderer(new DiscountListCellRenderer());

        jLabel1.setText(bundle.getString("Label.Discount")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(basicInformationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(paymentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(purchasingSplitPane)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(addItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(discountsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(purchasingSplitPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(discountsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addItemButton)
                            .addComponent(removeItemButton))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(basicInformationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paymentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateGUI(boolean softReset) {
        try {
            order = ordersService.getById(orderId);
        } catch (ValidationException ex) {
            throw new RuntimeException(ex);
        }

        /*
         * Total
         */
        totalTextField.setText(order.getTotal().toPlainString());

        /*
         * Paid
         */
        paidTextField.setText(order.getPayment().toPlainString());

        /*
         * Due
         */
        dueTextField.setForeground(order.getDue().compareTo(BigDecimal.ZERO) > 0 ? new Color(168, 0, 0) : new Color(98, 179, 0));
        dueTextField.setBackground(order.getDue().compareTo(BigDecimal.ZERO) > 0 ? new Color(255, 173, 206) : new Color(211, 255, 130));

        dueTextField.setText(order.getDue().toPlainString());

        /*
         * Payment
         */
        if (!softReset) {
            paymentTextField.setText("0.00"); //NOI18N
        }

        /*
         * Items list. It has to be reloaded for some items could have gone out
         * of stock since last update. However, we want to preserve the selected
         * item for convinience.
         */
        List<ItemDTO> items;
        int index = itemsList.getSelectedIndex();
        if (order.getClientId() == null) {
            items = itemsService.getPureItemsAvailable();
        } else {
            items = itemsService.getItemsAvailable();
        }
        itemsListModel.set(items);
        if (index >= items.size()) {
            index--;
        }
        itemsList.setSelectedIndex(index);

        /*
         * Purchases table. It has to be reloaded for some items could have been
         * bought or returned since last update. However, we want to preserve
         * the selected item for convinience.
         */
        List<OrderLineDTO> orderLines = order.getOrderLines();
        index = orderLinesTable.getSelectedRow();
        orderLinesTableModel.setOrderLines(orderLines);
        if (index >= items.size()) {
            index--;
        }
        orderLinesTable.getSelectionModel().setSelectionInterval(index, index);

        /*
         * We update basic information only upon hard resets for it could not
         * have changed since last update.
         */
        if (!softReset) {
            String subject;
            if (order.getClientId() == null) {
                if (order.getAttendanceId() != null) {
                    AttendanceDTO attendance;
                    try {
                        attendance = attendancesService.getAttendanceById(order.getAttendanceId());
                    } catch (SecurityException ex) {
                        throw new RuntimeException(ex);
                    }
                    subject = MessageFormat.format(bundle.getString("Text.Attendance.withIDAndKey"),
                            new Object[]{
                                attendance.getId(),
                                attendance.getKeyTitle()
                            });
                } else {
                    subject = bundle.getString("Text.Other");
                }
            } else {
                ClientDTO client;
                try {
                    client = clientsService.getById(order.getClientId());
                } catch (ValidationException ex) {
                    throw new RuntimeException(ex);
                }
                subject = MessageFormat.format(bundle.getString("Text.Client.withFullNameAndID"),
                        new Object[]{
                            client.getFullName(),
                            client.getId()
                        });
            }
            subjectTextField.setText(subject);
            subjectTextField.getCaret().setDot(0);

            /*
             * Date
             */
            dateTextField.setText(order.getDate().toString("dd-MM-yyyy")); //NOI18N
        }
    }

    /**
     * Processes an Add button click event
     *
     * @param evt an optional ActionEvent
     */
    private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed

        Short itemId = getSelectedItemId();

        if (itemId == null) {
            /*
             * Asks the user to select an item.
             */
            ValidationException ex = new ValidationException(bundle.getString("Message.SelectItemFirst"));
            CensusFrame.getGlobalCensusExceptionListenersStack().peek().processException(ex);
            return;
        }

        try {
            DiscountDTO discount = (DiscountDTO)discountsComboBox.getSelectedItem();
            ordersService.addPurchase(order.getId(), itemId, discount == null ? null : discount.getId());
        } catch (BusinessException | ValidationException | SecurityException ex) {
            CensusFrame.getGlobalCensusExceptionListenersStack().peek().processException(ex);
        } catch (RuntimeException ex) {
            /*
             * The exception is unexpected. We got to shutdown the dialog for
             * the state of the transaction is now unknown.
             */
            setResult(RESULT_EXCEPTION);
            setException(ex);
            dispose();
            return;
        }

        // We do a GUI update with soft reset to reload data that might have changed.
        updateGUI(true);
    }//GEN-LAST:event_addItemButtonActionPerformed

    /**
     * Processes a Remove button click.
     *
     * @param evt an optional ActionEvent
     */
    private void removeItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemButtonActionPerformed

        int orderLineIndex = orderLinesTable.getSelectedRow();
        
        if (orderLineIndex == -1) {
            ValidationException ex = new ValidationException(bundle.getString("Message.SelectOrderLineFirst"));
            CensusFrame.getGlobalCensusExceptionListenersStack().peek().processException(ex);
            return;
        }
        
        OrderLineDTO orderLine = order.getOrderLines().get(orderLineIndex);

        try {
            ordersService.removePurchase(orderLine.getId());
        } catch (BusinessException | SecurityException ex) {
            CensusFrame.getGlobalCensusExceptionListenersStack().peek().processException(ex);
        } catch (ValidationException | RuntimeException ex) {
            /*
             * The exception is unexpected. We got to shutdown the dialog for
             * the state of the transaction is now unknown.
             */
            setResult(RESULT_EXCEPTION);
            setException(new RuntimeException(ex));
            dispose();
            return;
        }

        // Reloads the order and updates GUI
        setOrderId(orderId);
    }//GEN-LAST:event_removeItemButtonActionPerformed

    private Short getSelectedItemId() {

        Short itemId = null;

        /*
         * Checks the items list, first.
         */
        ItemDTO itemDTO = (ItemDTO) itemsList.getSelectedValue();

        if (itemDTO != null) {
            itemId = itemDTO.getId();
        } else {
            /*
             * Checks the order lines, second.
             */
            int index = orderLinesTable.getSelectedRow();
            if (index != -1) {
                itemId = order.getOrderLines().get(index).getItemId();
            }
        }

        return itemId;
    }

    /**
     * Processes an OK button click
     *
     * @param evt an optional event
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

        try {
            BigDecimal newPayment = new BigDecimal(paymentTextField.getText().trim());

            if (isFullPaymentForced() && order.getDue().compareTo(newPayment) != 0) {
                throw new BusinessException(bundle.getString("Message.FullPaymenIsForced"));
            }

            ordersService.recordPayment(order.getId(), newPayment);
        } catch (NumberFormatException ex) {
            String message = MessageFormat.format(bundle.getString("Message.FieldIsNotFilledInCorrectly.withFieldName"),
                    bundle.getString("Text.NewPayment"));
            CensusFrame.getGlobalCensusExceptionListenersStack().peek().processException(new ValidationException(message));
            return;
        } catch (BusinessException | ValidationException | SecurityException ex) {
            CensusFrame.getGlobalCensusExceptionListenersStack().peek().processException(ex);
            return;
        } catch (RuntimeException ex) {
            /*
             * The exception is unexpected. We got to shutdown the dialog for
             * the state of the transaction is now unknown.
             */
            setResult(RESULT_EXCEPTION);
            setException(ex);
            dispose();
            return;
        }

        setResult(RESULT_OK);
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setResult(RESULT_CANCEL);
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void paymentTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_paymentTextFieldFocusGained
        paymentTextField.setSelectionStart(0);
        paymentTextField.setSelectionEnd(paymentTextField.getDocument().getLength());
    }//GEN-LAST:event_paymentTextFieldFocusGained

    private void paymentTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_paymentTextFieldFocusLost
        paymentTextField.setSelectionEnd(0);
        paymentTextField.setSelectionEnd(0);
    }//GEN-LAST:event_paymentTextFieldFocusLost

    /**
     * Sets the order's ID. This method causes all components to be reloaded in
     * order to correspond with the new order.
     *
     * @param orderId the
     * @see EditOrderDialog for details about hot swapping
     */
    public void setOrderId(Short orderId) {
        this.orderId = orderId;

        updateGUI(false);
    }

    public Boolean isFullPaymentForced() {
        return fullPaymentForced;
    }

    public void setFullPaymentForced(Boolean fullPaymentForced) {
        this.fullPaymentForced = fullPaymentForced;
    }

    public Short getOrderId() {
        return orderId;
    }
    /*
     * Presentation
     */
    private OrderLinesTableModel orderLinesTableModel;
    private MutableListModel<ItemDTO> itemsListModel;
    private Short orderId;
    private Boolean fullPaymentForced;
    private ResourceBundle bundle = ResourceBundle.getBundle("census/presentation/resources/Strings");
    /*
     * Business
     */
    private OrdersService ordersService;
    private ClientsService clientsService;
    private AttendancesService attendancesService;
    private ItemsService itemsService;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItemButton;
    private javax.swing.JPanel basicInformationPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JTextField dateTextField;
    private javax.swing.JComboBox discountsComboBox;
    private javax.swing.JLabel dueLabel;
    private javax.swing.JTextField dueTextField;
    private javax.swing.JList itemsList;
    private javax.swing.JScrollPane itemsScrollPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton okButton;
    private census.business.dto.OrderDTO order;
    private javax.swing.JTable orderLinesTable;
    private javax.swing.JLabel paidLabel;
    private javax.swing.JTextField paidTextField;
    private javax.swing.JLabel paymentLabel;
    private javax.swing.JPanel paymentPanel;
    private javax.swing.JTextField paymentTextField;
    private javax.swing.JScrollPane purchasesScrollPane;
    private javax.swing.JSplitPane purchasingSplitPane;
    private javax.swing.JButton removeItemButton;
    private javax.swing.JLabel subjectLabel;
    private javax.swing.JTextField subjectTextField;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JTextField totalTextField;
    // End of variables declaration//GEN-END:variables
}
